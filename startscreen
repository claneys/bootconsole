#!/usr/bin/python
# Copyright (c) 2008 Alon Swartz <alon@turnkeylinux.org> - all rights reserved
# Modified and adapted by Romain Forlot.
# Copyright (c) 2014 Romain Forlot <romain.forlot@syleps.fr> - all rights reserved

"""Syleps Configuration Console

Options:
    --usage         Display usage screen without Advanced Menu

"""

import os
import re
import sys
import time
import traceback
from string import Template
from StringIO import StringIO
from bootconsole.dialog import Dialog
from bootconsole.netinfo import *
from bootconsole.ipaddr import IP, IPRange
import bootconsole.ifutil as ifutil
import bootconsole.executil as executil
import bootconsole.conf as conf
import bootconsole.block as block
from bootconsole.syleps import Syleps

class Error(Exception):
    pass

def fatal(e):
    print >> sys.stderr, "error: " + str(e)
    sys.exit(1)

def usage(e=None):
    if e:
        print >> sys.stderr, "error: " + str(e)

    print >> sys.stderr, "Syntax: %s" % (sys.argv[0])
    print >> sys.stderr, __doc__.strip()
    sys.exit(1)

class Console:
    def __init__(self, title=None, width=60, height=20):
        self.width = width
        self.height = height

        self.console = Dialog(dialog="dialog")
        self.console.add_persistent_args(["--no-collapse"])
        self.console.add_persistent_args(["--ok-label", "Select"])
        self.console.add_persistent_args(["--cancel-label", "Back"])
        self.console.add_persistent_args(["--colors"])
        if title:
            self.console.add_persistent_args(["--backtitle", title])

    def _handle_exitcode(self, retcode):
        if retcode == 2: # ESC, ALT+?
            text = "Do you really want to quit?"
            if self.console.yesno(text) == 0:
                self.running = False
                sys.exit(0)
            else:
                return False
        return True

    def _wrapper(self, dialog, text, *args, **kws):
        try:
            method = getattr(self.console, dialog)
        except AttributeError:
            raise Error("dialog not supported: " + dialog)

        while 1:
            ret = method("\n" + text, *args, **kws)
            if type(ret) is int:
                retcode = ret
            else:
                retcode = ret[0]

            if self._handle_exitcode(retcode):
                break

        return ret

    def infobox(self, text):
        return self._wrapper("infobox", text)

    def yesno(self, text, height=10, width=30):
        return self._wrapper("yesno", text, height, width)

    def msgbox(self, title, text, button_label="ok"):
        return self._wrapper("msgbox", text, self.height, self.width,
                             title=title, ok_label=button_label)

    def menu(self, title, text, choices, no_cancel=False):
        return self._wrapper("menu", text, self.height, self.width,
                             menu_height=len(choices)+1,
                             title=title, choices=choices, no_cancel=no_cancel)

    def form(self, title, text, fields, ok_label="Apply", cancel_label="Cancel"):
        return self._wrapper("form", text, self.height, self.width,
                             form_height=len(fields)+1,
                             title=title, fields=fields,
                             ok_label=ok_label, cancel_label=cancel_label)

class SylepsConsole:
    OK = 0
    CANCEL = 1
    NetworkInfo = NetworkInfo()
    config = conf.Conf("bootconsole.conf")
    block_devices = block.BlockDevices()
    var_dir = config.get_param('var_dir')
    ifnames = NetworkInfo.get_filtered_ifnames()
    version_file = os.path.join(var_dir, 'versions')

    def __init__(self, advanced_enabled=True):
        # Console attribute
        title = "Syleps Linux Configuration Console"
        self.width = 80
        self.height = 25
        self.console = Console(title, self.width, self.height)
        self.appname = "Syleps Linux"
        self.advanced_enabled = advanced_enabled
        self.component = SylepsConsole.config.get_param('component')
        self.peer_component = SylepsConsole.config.get_param('peer_component')
        self.default_nic = self.get_default_nic()
        self.fs2extend_file = os.path.join(self.var_dir, 'fs2extend')
        self.systemctl = self._get_systemctl()
        
        # Detect if we have to grow fs
        try:
            if os.path.exists(self.fs2extend_file):
                self.console.infobox("Growing fs...")
                fh = open(self.fs2extend_file, 'r')
                fs2extend = fh.read()
                fh.close()

                for disk in fs2extend.split():
                    cmd = self.block_devices.get_lastpart(disk)['cmd']
                    ret = executil.system(cmd+'> /dev/null 2>&1')

                    if ret:
                        while True:
                            self._check_error(ret)
                
                os.remove(self.fs2extend_file)
        except conf.Error:
            pass

###########################################################################################################
#
#    Internal object's functions
#
###########################################################################################################
    @staticmethod
    def _get_systemctl():
        try:
            os.stat('/usr/bin/systemctl')
            systemctl = { 'poweroff': '/usr/bin/systemctl poweroff',
                               'reboot': '/usr/bin/systemctl reboot',}
        except OSError:
            systemctl = { 'poweroff': 'shutdown -h now',
                               'reboot': 'shutdown -r now',}
        
        return systemctl

    # Just end the initialisation phase with latest value initialized
    def _last_init(self):
        fh = open(SylepsConsole.version_file, 'r')
        self.version = fh.readline().strip()
        self.peer_version = fh.readline().strip()
        fh.close()
        self.component = SylepsConsole.config.get_param('component')
        self.peer_component = SylepsConsole.config.get_param('peer_component')

    def _update_versions(self):
        hosts_conf = conf.Conf("hosts")
            
        # Ok ! Do we ran before and set up the file flag ?
        try:
            os.stat(SylepsConsole.version_file)
            self._last_init()
        except OSError:
            # NO !
            # Just going ask for the peer node so
            version_run = Console(title='First run wizard', width=85, height=25)
            fields = [
                ("Hostname for the appliance partner node:", '', 30, 30),
                ("IP address for the appliance partner node:", '', 30, 30),
            ]
            while 1:
                retcode, input = version_run.form('Appliance Partner Node', 'Partner node AS or DB has to be up and installed.\nWhat are the partner node\'s ip address ?', fields)
                if IP.is_legal(input[1]) and NetworkInfo.is_legal_hostname(input[0]):
                    err = Syleps().get_ora_versions(input[1], SylepsConsole.version_file)
                    if err:
                        self._check_error(err)
                        break
                    
                    host = { 'hostname':self.NetworkInfo.hostname,
                            'ip': SysInterfaceInfo(self.default_nic).address
                    }
                    peer_host = { 'hostname' : input[0],
                                'ip': input[1],
                    }
                    
                    self._last_init()
                    
                    aliases = hosts_conf.get_host(self.component)['aliases'].split(',')
                    aliases.append(self.component)
                    peer_aliases = hosts_conf.get_host(self.peer_component)['aliases'].split(',')
                    peer_aliases.append(self.peer_component)
                    # Write host component
                    hosts_conf.set_hosts(host['ip'], host['hostname'], aliases, peer_host['hostname'], peer_aliases, peer_host['ip'])
                    break
                else:
                    version_run.msgbox('Error', 'Invalid IP address or hostname')

    def _get_serial(self):
        if self.component != 'AS' and self.component != 'DB':
            raise Error('Wrong component specified %s. Only "AS" or "DB" allowed' % self.component)
        fd = time.gmtime(os.stat(conf.path('usage.txt'))[-2])
        fd = time.strftime('%y%m%d', fd)
        try:
            uuid = file(conf.path('validated'), 'r').readline()
        except:
            self._check_error('This VM has never been validated by Syleps SIC.\nPlease contact them to validate this installation, thanks.')

        return "%s-%s-%s" % (self.component, fd, uuid)

    @classmethod
    def get_default_nic(self):
        def _validip(ifname):
            ip = SysInterfaceInfo(ifname).address
            if ip and not ip.startswith('169'):
                return True
            return False

        self.default_nic_set = False
        try:
            ifname = self.config.get_param('default_nic')
        except KeyError:
            ifname = None

        if ifname:
            self.default_nic_set = True
            if _validip(ifname):
                return ifname

        for ifname in self.ifnames:
            if _validip(ifname):
                return ifname

        return None
    
    def _check_error(self, err):
        if err:
            self.console.msgbox('Error', err)

    def _get_advmenu(self):
        items = []
        items.append(("Networking", "Configure appliance networking"))
        items.append(("Hosts", "Configure /etc/hosts and hostname settings"))
        items.append(("Versions", "Update version DB and AS informations"))
        items.append(('NTP', 'Configure NTP servers'))
        items.append(("Filesystems", "Grow last filesystem on a disk"))

        items.append(("Reboot", "Reboot the appliance"))
        items.append(("Shutdown", "Shutdown the appliance"))

        return items

    def advanced(self):
        # Don't display cancel button when no interfaces at all
        no_cancel = False
        if len(self.ifnames) == 0:
            no_cancel = True
        retcode, choice = self.console.menu("Advanced Menu",
                                            self.appname + " Advanced Menu\n",
                                            self._get_advmenu(),
                                            no_cancel=no_cancel)

        if retcode is not self.OK:
            return "usage"

        return "_adv_" + choice.lower()
    
    def keep_ifconf(self):
        param = 'default_nic'
        self.config.del_param(param)
        self.config.set_param(param, self.default_nic)
        self.config.write_conf()
        self.default_nic_set = True

        text = self._get_ifconftext(self.default_nic)
        if self.console.yesno("%s\n\nAre we keeping this network configuration ?"% text, 20, 60) == self.OK:
            return 'usage'
        else:
           return 'networking'

###########################################################################################################
#
#    Networking user interfaces functions
#
###########################################################################################################

    def networking(self):

        #if no interfaces at all - display error and go to advanced
        if len(self.ifnames) == 0:
            self.console.msgbox("Error", "No network adapters detected")
            return "advanced"

        # if only 1 interface, dont display menu - just configure it
        if len(self.ifnames) == 1:
            self.ifname = self.ifnames[0]
            self.default_ip, self.default_netmask, self.default_gateway, self.default_nameservers, self.search_domain = SysInterfaceInfo(self.ifname).get_ipconf()
            return "ifconf"

        # display networking
        text = "Choose network adapter to configure\n"
        if self.default_nic:
            text += "[*] This adapter's IP address is displayed in Usage"

        retcode, self.ifname = self.console.menu("Networking configuration",
                                                 text, self._get_netmenu())

        if retcode is not self.OK:
            return "advanced"

        self.ip, self.netmask, self.gateway, self.nameservers, self.search_domain = SysInterfaceInfo(self.ifname).get_ipconf()
        return "ifconf"

    def _get_netmenu(self):
        menu = []
        for ifname in self.ifnames:
            addr = SysInterfaceInfo(ifname).address
            ifmethod = ifutil.NetworkInterface(ifname).method

            if addr:
                desc = addr
                if ifmethod:
                    desc += " (%s)" % ifmethod

                if ifname == self.get_default_nic():
                    desc += " [*]"
            else:
                desc = "not configured"

            menu.append((ifname, desc))

        return menu

    def _get_ifconfmenu(self):
        menu = []
        menu.append(("DHCP", "Configure networking automatically"))
        menu.append(("StaticIP", "Configure networking manually"))

        if self.default_nic and self.ifname != self.default_nic and \
           len(self.ifnames) > 1 and \
           self.ip is not None:
               menu.append(("Default", "Show this adapter's IP address in Usage"))

        return menu

    def _get_ifconftext(self, ifname):
        self.ip, self.netmask, self.gateway, self.nameservers, self.search_domain = SysInterfaceInfo(ifname).get_ipconf()

        if self.ip is None:
            return "Network adapter is not configured\n"

        text =  "IP Address:      %s\n" % self.ip
        text += "Netmask:         %s\n" % self.netmask
        text += "Default Gateway: %s\n" % self.gateway
        text += "Name Server(s):  %s\n\n" % " ".join(self.nameservers)

        ifmethod = ifutil.NetworkInterface(ifname).method
        if ifmethod:
            text += "Networking configuration method: %s\n" % ifmethod

        if len(self.ifnames) > 1:
            text += "Is this adapter's IP address displayed in Usage: "
            if ifname == self.default_nic:
                text += "yes\n"
            else:
                text += "no\n"

        return text

    def ifconf(self):
        retcode, choice = self.console.menu("%s configuration" % self.ifname,
                                            self._get_ifconftext(self.ifname),
                                            self._get_ifconfmenu())

        if retcode is not self.OK:
            # if multiple interfaces go back to networking
            if len(self.ifnames) > 1:
                return "networking"

            return "advanced"

        return "_ifconf_" + choice.lower()

    def _ifconf_staticip(self):
        def _validate(addr, netmask, gateway, nameservers):
            """Validate Static IP form parameters. Returns an empty array on
               success, an array of strings describing errors otherwise"""

            errors = []
            if not addr:
                errors.append("No IP address provided")
            elif not IP.is_legal(addr):
                errors.append("Invalid IP address: %s" % addr)

            if not netmask:
                errors.append("No netmask provided")
            elif not IP.is_legal(netmask):
                errors.append("Invalid netmask: %s" % netmask)

            for nameserver in nameservers:
                if nameserver and not IP.is_legal(nameserver):
                    errors.append("Invalid nameserver: %s" % nameserver)

            if len(nameservers) != len(set(nameservers)):
                errors.append("Duplicate nameservers specified")

            if errors:
                return errors

            if gateway:
                if not IP.is_legal(gateway):
                    return [ "Invalid gateway: %s" % gateway ]
                else:
                    iprange = IPRange(addr, netmask)
                    if gateway not in iprange:
                        return [ "Gateway (%s) not in IP range (%s)" % (gateway,
                                                                        iprange) ]
            return []

        input = [self.ip, self.netmask, self.gateway, self.search_domain]
        input.extend(self.nameservers)
        # include minimum 2 nameserver fields and 1 blank one
        if len(input) < 4:
            input.append('')

        if input[-1]:
            input.append('')

        field_width = 30
        field_limit = 15

        while 1:
            fields = [
                ("IP Address", input[0], field_width, field_limit),
                ("Netmask", input[1], field_width, field_limit),
                ("Default Gateway", input[2], field_width, field_limit),
                ("Search Domain", input[3], field_width, field_limit),
                ("Name Server #1", input[4], field_width, field_limit),
                ("Name Server #2", input[5], field_width, field_limit),
            ]

            text = "Static IP configuration (%s)" % self.ifname
            retcode, input = self.console.form("Network settings", text, fields)

            if retcode is not self.OK:
                break

            # remove any whitespaces the user might of included
            for i in range(len(input)):
                input[i] = input[i].strip()

            # unconfigure the nic if all entries are empty
            if not input[0] and not input[1] and not input[2] and not input[3]:
                ifutil.NetworkInterface(self.ifname).unconfigure_if()
                break

            new_ip, new_netmask, new_gateway = input[:3]
            new_nameservers = input[4:]
            for i in range(new_nameservers.count('')):
                new_nameservers.remove('')

            new_search_domain = input[3]
            
            err = _validate(new_ip, new_netmask, new_gateway, new_nameservers)
            if err:
                err = "\n".join(err)
            else:
                err = ifutil.NetworkInterface(self.ifname).set_static(new_ip, new_netmask,
                                        new_gateway, new_nameservers, new_search_domain)
                if not err:
                    break

            self._check_error(err)

        return "ifconf"

    def _ifconf_dhcp(self):
        self.console.infobox("Requesting DHCP for %s..." % self.ifname)
        err = ifutil.NetworkInterface(self.ifname).set_dhcp()
        self._check_error(err)

        return "ifconf"

###########################################################################################################
#
#    Advanced menu choice functions
#
###########################################################################################################

    def _adv_filesystems(self):
        '''
        Grows filesystem size if new free space available on disk
        after having grow disk size
        '''

        disks = self.block_devices.rescan_disks()

        #if no block devices at all - display error and go to advanced
        if len(disks) == 0:
            self._check_error(err)
            return "advanced"

        # if only 1 block device, dont display menu - just configure it
        if len(disks) == 1:
            self.disk = disks[0][0]
            return "grow_fs"

        text = "Choose the block device grown\n"
        retcode, self.disk = self.console.menu("Grow block device and the last fs on partition table",
                                                 text, disks)

        if retcode is not self.OK:
            return "advanced"

        return "grow_fs"

    def grow_fs(self):

        device = '/dev/' + self.disk

        lastpart = self.block_devices.get_lastpart(self.disk)
        sfdisk_cmd = 'sfdisk --no-reread -uS -L -N'+lastpart['num']+' '+device+' << EOF\n'
        sfdisk_script = ','+lastpart['max_size']+','+lastpart['type']+'\nEOF\n'

        executil.system(sfdisk_cmd+sfdisk_script, careabouterrors=False)
        fh = open(self.fs2extend_file, 'a')
        fh.write(self.disk+' ')
        fh.close()

        self.console.msgbox("Notice", "Reboot needed to grow fs on %s..." % device)

        return 'advanced'
    
    def _adv_ntp(self):
        '''
        Configure 1 to 4 NTP server
        '''
        def _validate(ntp_server):
            # Only get first part and don't check ntp options like iburst
            ntp_server = ntp_server.split(' ')[0]
            if not IP.is_legal(ntp_server) and not self.NetworkInfo.is_legal_hostname(ntp_server) and ntp_server:
                errors.append("Invalid ntp server: %s.\nPlease only configure an IP or hostname."% ntp_server)

            if errors:
                return errors

            return []

        text='Configure on which ntp server we synchronize to. At least one server needed.'
        errors = []

        try:
            ntp_conf = conf.Conf('ntp.conf')
            daemon = 'ntpd'
        except:
            ntp_conf = conf.Conf('chrony.conf')
            daemon = 'chronyd'

        # Make sure we have a list as server parameter
        server = ntp_conf.get_param('server')
        if isinstance(server, str):
            ntp_conf.set_param('server', '')
            ntp_conf.set_param('server', '')
            ntp_conf.set_param('server', '')

        i = 0
        fields = []
        input = ['', '', '', '']

        field_width = 50
        field_limit = 50

        while 1:
            try:
                for i in range(len(input)):
                     input[i] = ntp_conf.get_param('server')[i]
            except IndexError:
                pass

            fields.append(('NTP server', input[0], field_width, field_limit))
            fields.append(('NTP server', input[1], field_width, field_limit))
            fields.append(('NTP server', input[2], field_width, field_limit))
            fields.append(('NTP server', input[3], field_width, field_limit))

            retcode, input = self.console.form("NTP server configuration", text, fields)

            if retcode is not self.OK:
                break

            # Reset old parameters before inserting new one
            ntp_conf.del_param('server')
            ntp_conf.del_param('peer')

            # remove any whitespaces, empty values and comment at endline
            # the user might included and process errors
            for i in range(len(input)):
                if input[i] != '':
                    ntp_conf.set_param('server', input[i].strip().split('#')[0])
                else:
                    continue
            for server in ntp_conf.get_param('server'):
                err = _validate(server)

                if err:
                    err = "\n".join(err)

            self._check_error(err)
            # Add a peer ntp server from hosts file and write conf
            # Peer hosts are application server or database host composing
            # the appliance.
            hosts_conf = conf.Conf('hosts')
            ntp_conf.set_param('peer', self.peer_component)
            err = ntp_conf.write_conf()
            self._check_error(err)
            executil.system('/usr/bin/systemctl restart %s > /dev/null 2>&1' % daemon)

            break

        return "advanced"

    def _adv_hosts(self):
        '''
        Configure /etc/hosts file and make sure that we have alias from both
        servers configured
        '''
        def _validate(hostname, alias, peer_hostname, peer_component, peer_ip):
            errors = []
            if not peer_ip:
                errors.append("IP address missing")
            elif not IP.is_legal(peer_ip):
                errors.append("Invalid IP address")

            for elt in [hostname, alias, peer_hostname, peer_component]:
                if type(elt) == list:
                    for subelt in elt:
                        if not self.NetworkInfo.is_legal_hostname(subelt):
                            errors.append(elt+' hostname not compliant. Illegal char, just alphanumeric and "-","." are authorized')
                else:
                    if not self.NetworkInfo.is_legal_hostname(elt):
                        errors.append(elt+' hostname not compliant. Illegal char, just alphanumeric and "-","." are authorized')
                        
                if errors:
                    return errors
                    
                return []

        # Fill form input based upon which role has the server (AS or DB instance)
        hosts_conf = conf.Conf("hosts")
        ifname = self.default_nic
        input = [None, None, None, None, None]
        peer_host = hosts_conf.get_host(self.peer_component)
        input[0] = self.NetworkInfo.hostname
        try:
            input[1] = hosts_conf.get_host(self.component)['aliases']
            input[2] = peer_host['hostname']
            input[3] = peer_host['aliases']
            input[4] = peer_host['ip']
        except TypeError:
            pass

        fields = []
        field_width = 50
        field_limit = 50
        
        label_mapping = {'oradb11g': 'DB', 'oradb12c': 'DB', 'ofm11g': 'AS', 'AS': 'AS', 'DB': 'DB'}

        while 1:
            fields.append(("Hostname", input[0], field_width, field_limit))
            fields.append(("Additional(s) alias", input[1], field_width, field_limit))
            fields.append((label_mapping[self.peer_component] + " hostname", input[2], field_width, field_limit))
            fields.append((label_mapping[self.peer_component] + " additional(s) aliases", input[3], field_width, field_limit))
            fields.append((label_mapping[self.peer_component] + " IP address", input[4], field_width, field_limit))
            
            text = "Set /etc/hosts entries. Hostname can be shortname or fqdn and you can specify comma separated additionnal alias.\nYou must include for each host a Syleps compliant hostname or alias with form CCCSSSdbsup or CCCSSSassup.\nIf you don't know about it please ask Syleps SIC team, thanks."
            retcode, input = self.console.form("Hosts settings", text, fields)

            if retcode is not self.OK:
                break

            # remove any whitespaces the user might of included
            for i in range(len(input)):
                input[i] = input[i].strip()

            ip = SysInterfaceInfo(ifname).get_ipconf()[0]
            hostname = input[0]
            aliases = input[1].split(',')
            peer_hostname = input[2]
            peer_aliases = input[3].split(',')
            peer_ip = input[4]

            err = _validate(hostname, aliases, peer_hostname, peer_aliases, peer_ip)
            if err:
                err = "\n".join(err)
            else:
                aliases.append(self.component)
                peer_aliases.append(self.peer_component)
                err = hosts_conf.set_hosts(ip, hostname, aliases, peer_hostname, peer_aliases, peer_ip)
            self._check_error(err)
            
            if self.console.yesno('Do you want to change SU DB user\'s password ?\nNeeded if you modified mandatory Syleps compliant hostname or alias (ie: CCCSSSdbsup).', 30, 45) == self.OK:
                # Change Syleps ux user password as it rely on hostname.
                err = Syleps().change_password(hostname, aliases)
                self._check_error(err)
            
            break

        return 'advanced'
    
    def _adv_versions(self):
        try:
            os.remove(os.path.join(SylepsConsole.var_dir, 'versions'))
        except OSError:
            pass
        self._update_versions()
        return 'advanced'

    def _shutdown(self, text, cmd):
        if self.console.yesno(text) == self.OK:
            self.running = False
            fgvt = os.environ.get("FGVT")
            if fgvt:
                cmd = "chvt %s; " % fgvt + cmd
            executil.system(cmd)

        return "advanced"

    def _adv_reboot(self):
        return self._shutdown("Reboot the appliance?", self.systemctl['reboot'])

    def _adv_shutdown(self):
        return self._shutdown("Shutdown the appliance?", self.systemctl['poweroff'])

    def _adv_quit(self):
        if self.advanced_enabled:
            default_return_value = "advanced" ;
        else:
            'usage'

        if self.console.yesno("Do you really want to quit?") == self.OK:
            self.running = False

        return default_return_value

    _adv_networking = networking
    quit = _adv_quit

###########################################################################################################
#
#    Running motor functions ( The main... )
#
###########################################################################################################

    def loop(self, dialog="usage"):
        self.running = True
        prev_dialog = dialog

        while dialog and self.running:
            try:
                try:
                    method = getattr(self, dialog)
                except AttributeError:
                    raise Error("dialog not supported: " + dialog)

                new_dialog = method()
                prev_dialog = dialog
                dialog = new_dialog

            except Exception, e:
                sio = StringIO()
                traceback.print_exc(file=sio)

                self.console.msgbox("Caught exception", sio.getvalue())
                dialog = prev_dialog

    def usage(self):
        if self.advanced_enabled:
            default_button_label = "Advanced Menu"
            default_return_value = "advanced"
        else:
            default_button_label = "Quit"
            default_return_value = "quit"

        #if no interfaces at all - display error and go to advanced
        if len(self.ifnames) == 0:
            error = "No network adapters detected"
            if not self.advanced_enabled:
                fatal(error)

            self.console.msgbox("Error", error)
            return "advanced"

        #if interfaces but no default - ask if we keep that actual network configuration
        ifname = self.default_nic
        if not self.default_nic_set:
            error = "Network configuration need your approval."
            if not self.advanced_enabled:
                fatal(error)
            self._check_error(error)
            return "keep_ifconf"
        elif not ifname:
            error = "Network not yet configured.\n\n Please configure the network interface."
            if not self.advanced_enabled:
                fatal(error)
            self._check_error(error)
            self.default_nic = self.config.get_param('default_nic')
            return "networking"
        
            
        # if no Oracle versions set
        #display usage
        try:
            os.stat(SylepsConsole.version_file)
            self._last_init()
            ipaddr = SysInterfaceInfo(ifname).get_ipconf()[0]
            hostname = self.NetworkInfo.hostname
    
            #backwards compatible - use usage.txt if it exists
            t = file(conf.path("usage.txt"), 'r').read()
            text = Template(t).substitute(serial=self._get_serial(), hostname=hostname, ipaddr=ipaddr, local_version=self.version, peer_version=self.peer_version)
    
            text += "\n" * (self.height - len(text.splitlines()) - 7)
            text += "\Z3                            Syleps SU Appliance\n"
            text += "                          https://www.syleps.com"
    
            retcode = self.console.msgbox("Sydel Univers appliance services",
                                          text, button_label=default_button_label)
    
            if retcode is not self.OK:
                self.running = False
        except OSError:
            self.console.msgbox('Notice',
                                'Your installation doesn\'t have Oracle versions set.\nMay be, it is your first launch, please finish your installation, then use "Versions" menu to update informations')
            return default_return_value
        
        return default_return_value

def main():
    advanced_enabled = True

    args = sys.argv[1:]
    if args:
        if args[0] == '--usage':
            advanced_enabled = False
        else:
            usage()

    if os.geteuid() != 0:
        fatal("bootconsole needs root privileges to run")

    sc = SylepsConsole(advanced_enabled)
    sc.loop()

if __name__ == "__main__":
    main()