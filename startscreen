#!/usr/bin/python
# Copyright (c) 2008 Alon Swartz <alon@turnkeylinux.org> - all rights reserved
# Modified and adapted by Romain Forlot.
# Copyright (c) 2014 Romain Forlot <romain.forlot@syleps.fr> - all rights reserved

"""Syleps Configuration Console

Options:
    --usage         Display usage screen without Advanced Menu

"""

import os
import re
import sys
import time
import traceback
from string import Template
from StringIO import StringIO
from bootconsole.dialog import Dialog
from bootconsole.netinfo import *
from bootconsole.ipaddr import IP, IPRange
import bootconsole.ifutil as ifutil
import bootconsole.executil as executil
import bootconsole.conf as conf
import bootconsole.block as block
from bootconsole.syleps import Syleps

os.environ['TERM'] = 'xterm'
os.environ['LANG'] = 'en_US'

class Error(Exception):
    pass

def fatal(e):
    print >> sys.stderr, "error: " + str(e)
    sys.exit(1)

def usage(e=None):
    if e:
        print >> sys.stderr, "error: " + str(e)

    print >> sys.stderr, "Syntax: %s" % (sys.argv[0])
    print >> sys.stderr, __doc__.strip()
    sys.exit(1)

class Console:
    def __init__(self, title=None, width=60, height=20):
        self.width = width
        self.height = height

        self.console = Dialog(dialog="dialog")
        self.console.add_persistent_args(["--no-collapse"])
        self.console.add_persistent_args(["--ok-label", "Select"])
        self.console.add_persistent_args(["--cancel-label", "Back"])
        self.console.add_persistent_args(["--colors"])
        if title:
            self.console.add_persistent_args(["--backtitle", title])

    def _handle_exitcode(self, retcode):
        if retcode == 2: # ESC, ALT+?
            text = "Do you really want to quit?"
            if self.console.yesno(text) == 0:
                self.running = False
            else:
                return False
        return True

    def _wrapper(self, dialog, text, *args, **kws):
        try:
            method = getattr(self.console, dialog)
        except AttributeError:
            raise Error("dialog not supported: " + dialog)

        while 1:
            ret = method("\n" + text, *args, **kws)
            if type(ret) is int:
                retcode = ret
            else:
                retcode = ret[0]

            if self._handle_exitcode(retcode):
                break

        return ret

    def infobox(self, text):
        return self._wrapper("infobox", text)

    def yesno(self, text, height=10, width=30):
        return self._wrapper("yesno", text, height, width)

    def msgbox(self, title, text, button_label="ok"):
        return self._wrapper("msgbox", text, self.height, self.width,
                             title=title, ok_label=button_label)

    def menu(self, title, text, choices, no_cancel=False):
        return self._wrapper("menu", text, self.height, self.width,
                             menu_height=len(choices)+1,
                             title=title, choices=choices, no_cancel=no_cancel)

    def form(self, title, text, fields, ok_label="Apply", cancel_label="Cancel"):
        return self._wrapper("form", text, self.height, self.width,
                             form_height=len(fields)+1,
                             title=title, fields=fields,
                             ok_label=ok_label, cancel_label=cancel_label)

class SylepsConsole:
    OK = 0
    CANCEL = 1
    NetworkInfo = NetworkInfo()
    config = conf.Conf("bootconsole.conf")
    block_devices = block.BlockDevices()
    syleps = Syleps(bootconsole_conf=config)
    var_dir = config.get_param('var_dir')
    ifnames = ifutil.get_filtered_ifnames()
    
    def __init__(self, advanced_enabled=True):
        # Console attribute
        title = "Syleps Linux Configuration Console"
        self.width = 80
        self.height = 25
        self.alias, self.peer_alias = self._get_alias()
        self.fs2extend_file = os.path.join(self.var_dir, 'fs2extend')
        self.default_nic = self.get_default_nic()
        self.console = Console(title, self.width, self.height)
        self.appname = "Syleps Linux"

        self.advanced_enabled = advanced_enabled

        # Detect if we have to grow fs
        try:
            if os.path.exists(self.fs2extend_file):
                self.console.infobox("Growing fs...")
                fh = open(self.fs2extend_file, 'r')
                fs2extend = fh.read()
                fh.close()

                for disk in fs2extend.split():
                    cmd = self.block_devices.get_lastpart(disk)['cmd']
                    ret = executil.system(cmd+'> /dev/null 2>&1')

                    if ret:
                        while True:
                            self._check_error(ret)
                
                os.remove(self.fs2extend_file)
        except conf.Error:
            pass

    def _get_alias(self):
        alias = self.config.get_param('alias')
        peer_alias = self.config.get_param('peer_alias')
        if not alias.startswith('Could not find') and not peer_alias.startswith('Could not find'):
            return (alias, peer_alias)
        else:
            appliances = [('oradb12c', 'Oracle DB 12c'), ('oradb11g', 'Oracle DB 11g'), ('ofm11g', 'Oracle Fusion Middleware 11g')]
            
            DB_AS_Console = Console(title='Syleps SU Appliance', width=85, height=25)
            retcode, alias = DB_AS_Console.menu('Appliance choices', 'Which appliance is ?', appliances, no_cancel=True)
            for elt in appliances:
                if elt[0] == alias:
                    appliances.remove(elt)
            retcode, peer_alias = DB_AS_Console.menu('Appliance choices', 'And the peer appliance is ?', appliances, no_cancel=True)
            
            self.config.del_param('alias')
            self.config.del_param('peer_alias')
            self.config.set_param('alias', alias)
            self.config.set_param('peer_alias', peer_alias)
            self.config.write_conf()
            
            return (alias, peer_alias)

    def _get_serial(self):
        prefix = { 'oradb12c': 'db', 'oradb11g': 'db', 'ofm11g': 'as'}.get(self.alias, 'Invalid_alias')
        fd = time.gmtime(os.stat(conf.path('usage.txt'))[-2])
        fd = time.strftime('%y%m%d', fd)
        try:
            uuid = file(conf.path('validated'), 'r').readline()
        except:
            raise Error('This VM has never been validated')

        return "%s-%s-%s" % (prefix, fd, uuid)

    @classmethod
    def get_default_nic(self):
        def _validip(ifname):
            ip = SysInterfaceInfo(ifname).address
            if ip and not ip.startswith('169'):
                return True
            return False

        self.default_nic_set = False
        try:
            ifname = self.config.get_param('default_nic')
        except KeyError:
            ifname = None

        if ifname:
            self.default_nic_set = True
            if _validip(ifname):
                return ifname

        for ifname in self.ifnames:
            if _validip(ifname):
                return ifname

        return None
    
    def _check_error(self, err):
        if err:
            self.console.msgbox('Error', err)
            
    def _get_advmenu(self):
        items = []
        items.append(("Networking", "Configure appliance networking"))
        items.append(("Hosts", "Configure /etc/hosts and hostname settings"))
        # Abandonned configuration, dialog doesn't support so much choice in menu
        #items.append(("Timezone", "Configure system timezone"))
        items.append(('NTP', 'Configure NTP servers'))
        items.append(("Filesystems", "Grow last filesystem on a disk"))

        items.append(("Reboot", "Reboot the appliance"))
        items.append(("Shutdown", "Shutdown the appliance"))

        return items

    def networking(self):

        #if no interfaces at all - display error and go to advanced
        if len(self.ifnames) == 0:
            self.console.msgbox("Error", "No network adapters detected")
            return "advanced"

        # if only 1 interface, dont display menu - just configure it
        if len(self.ifnames) == 1:
            self.ifname = self.ifnames[0]
            self.default_ip, self.default_netmask, self.default_gateway, self.default_nameservers = SysInterfaceInfo(self.ifname).get_ipconf()
            return "ifconf"

        # display networking
        text = "Choose network adapter to configure\n"
        if self.default_nic:
            text += "[*] This adapter's IP address is displayed in Usage"

        retcode, self.ifname = self.console.menu("Networking configuration",
                                                 text, self._get_netmenu())

        if retcode is not self.OK:
            return "advanced"

        self.ip, self.netmask, self.gateway, self.nameservers = SysInterfaceInfo(self.ifname).get_ipconf()
        return "ifconf"

    def _get_netmenu(self):
        menu = []
        for ifname in self.ifnames:
            addr = SysInterfaceInfo(ifname).address
            ifmethod = ifutil.NetworkInterface(ifname).method

            if addr:
                desc = addr
                if ifmethod:
                    desc += " (%s)" % ifmethod

                if ifname == self.get_default_nic():
                    desc += " [*]"
            else:
                desc = "not configured"

            menu.append((ifname, desc))

        return menu

    def _get_ifconfmenu(self):
        menu = []
        menu.append(("DHCP", "Configure networking automatically"))
        menu.append(("StaticIP", "Configure networking manually"))

        if self.default_nic and self.ifname != self.default_nic and \
           len(self.ifnames) > 1 and \
           self.ip is not None:
               menu.append(("Default", "Show this adapter's IP address in Usage"))

        return menu

    def _get_ifconftext(self, ifname):
        self.ip, self.netmask, self.gateway, self.nameservers = SysInterfaceInfo(ifname).get_ipconf()

        if self.ip is None:
            return "Network adapter is not configured\n"

        text =  "IP Address:      %s\n" % self.ip
        text += "Netmask:         %s\n" % self.netmask
        text += "Default Gateway: %s\n" % self.gateway
        text += "Name Server(s):  %s\n\n" % " ".join(self.nameservers)

        ifmethod = ifutil.NetworkInterface(ifname).method
        if ifmethod:
            text += "Networking configuration method: %s\n" % ifmethod

        if len(self.ifnames) > 1:
            text += "Is this adapter's IP address displayed in Usage: "
            if ifname == self.default_nic:
                text += "yes\n"
            else:
                text += "no\n"

        return text

    def advanced(self):
        #dont display cancel button when no interfaces at all
        no_cancel = False
        if len(self.ifnames) == 0:
            no_cancel = True
        retcode, choice = self.console.menu("Advanced Menu",
                                            self.appname + " Advanced Menu\n",
                                            self._get_advmenu(),
                                            no_cancel=no_cancel)

        if retcode is not self.OK:
            return "usage"

        return "_adv_" + choice.lower()

    def ifconf(self):
        retcode, choice = self.console.menu("%s configuration" % self.ifname,
                                            self._get_ifconftext(self.ifname),
                                            self._get_ifconfmenu())

        if retcode is not self.OK:
            # if multiple interfaces go back to networking
            if len(self.ifnames) > 1:
                return "networking"

            return "advanced"

        return "_ifconf_" + choice.lower()

    def _ifconf_staticip(self):
        def _validate(addr, netmask, gateway, nameservers):
            """Validate Static IP form parameters. Returns an empty array on
               success, an array of strings describing errors otherwise"""

            errors = []
            if not addr:
                errors.append("No IP address provided")
            elif not IP.is_legal(addr):
                errors.append("Invalid IP address: %s" % addr)

            if not netmask:
                errors.append("No netmask provided")
            elif not IP.is_legal(netmask):
                errors.append("Invalid netmask: %s" % netmask)

            for nameserver in nameservers:
                if nameserver and not IP.is_legal(nameserver):
                    errors.append("Invalid nameserver: %s" % nameserver)

            if len(nameservers) != len(set(nameservers)):
                errors.append("Duplicate nameservers specified")

            if errors:
                return errors

            if gateway:
                if not IP.is_legal(gateway):
                    return [ "Invalid gateway: %s" % gateway ]
                else:
                    iprange = IPRange(addr, netmask)
                    if gateway not in iprange:
                        return [ "Gateway (%s) not in IP range (%s)" % (gateway,
                                                                        iprange) ]
            return []

        input = [self.ip, self.netmask, self.gateway]
        input.extend(self.nameservers)

        # include minimum 2 nameserver fields and 1 blank one
        if len(input) < 4:
            input.append('')

        if input[-1]:
            input.append('')

        field_width = 30
        field_limit = 15

        while 1:
            fields = [
                ("IP Address", input[0], field_width, field_limit),
                ("Netmask", input[1], field_width, field_limit),
                ("Default Gateway", input[2], field_width, field_limit),
            ]

            for i in range(len(input[3:])):
                fields.append(("Name Server", input[3+i], field_width, field_limit))

            text = "Static IP configuration (%s)" % self.ifname
            retcode, input = self.console.form("Network settings", text, fields)

            if retcode is not self.OK:
                break

            # remove any whitespaces the user might of included
            for i in range(len(input)):
                input[i] = input[i].strip()

            # unconfigure the nic if all entries are empty
            if not input[0] and not input[1] and not input[2] and not input[3]:
                ifutil.NetworkInterface(self.ifname).unconfigure_if()
                break

            new_ip, new_netmask, new_gateway = input[:3]
            new_nameservers = input[3:]
            for i in range(new_nameservers.count('')):
                new_nameservers.remove('')

            err = _validate(new_ip, new_netmask, new_gateway, new_nameservers)
            if err:
                err = "\n".join(err)
            else:
                err = ifutil.NetworkInterface(self.ifname).set_static(new_ip, new_netmask,
                                        new_gateway, new_nameservers, self.NetworkInfo.hostname)
                if not err:
                    break

            self._check_error(err)

        return "ifconf"

    def _ifconf_dhcp(self):
        self.console.infobox("Requesting DHCP for %s..." % self.ifname)
        err = ifutil.NetworkInterface(self.ifname).set_dhcp()
        self._check_error(err)

        return "ifconf"

    def _adv_filesystems(self):
        '''
        Grows filesystem size if new free space available on disk
        after having grow disk size
        '''

        disks = self.block_devices.rescan_disks()

        #if no block devices at all - display error and go to advanced
        if len(disks) == 0:
            self._check_error(err)
            return "advanced"

        # if only 1 block device, dont display menu - just configure it
        if len(disks) == 1:
            self.disk = disks[0][0]
            return "grow_fs"

        text = "Choose the block device grown\n"
        retcode, self.disk = self.console.menu("Grow block device and the last fs on partition table",
                                                 text, disks)

        if retcode is not self.OK:
            return "advanced"

        return "grow_fs"

    def grow_fs(self):

        device = '/dev/' + self.disk

        lastpart = self.block_devices.get_lastpart(self.disk)
        sfdisk_cmd = 'sfdisk --no-reread -uS -L -N'+lastpart['num']+' '+device+' << EOF\n'
        sfdisk_script = ','+lastpart['max_size']+','+lastpart['type']+'\nEOF\n'

        executil.system(sfdisk_cmd+sfdisk_script)
        fh = open(self.fs2extend_file, 'a')
        fh.write(self.disk+' ')
        fh.close()

        self.console.msgbox("Notice", "Reboot needed to grow fs on %s..." % device)

        return 'advanced'
    
    def _adv_ntp(self):
        '''
        Configure 1 to 4 NTP server
        '''
        def _validate(ntp_server):
            if not IP.is_legal(ntp_server) and not self.NetworkInfo.is_legal_hostname(ntp_server) and ntp_server:
                errors.append("Invalid ntp server: %s.\nPlease only configure an IP or hostname."% ntp_server)

            if errors:
                return errors

            return []

        text='Configure on which ntp server we synchronize to. At least one server needed.'
        errors = []

        ntp_conf = conf.Conf('ntp.conf')

        # Make sure we have a list as server parameter
        server = ntp_conf.get_param('server')
        if isinstance(server, str):
            ntp_conf.set_param('server', '')
            ntp_conf.set_param('server', '')
            ntp_conf.set_param('server', '')

        i = 0
        fields = []
        input = ['', '', '', '']

        field_width = 50
        field_limit = 50

        while 1:
            try:
                for i in range(len(input)):
                     input[i] = ntp_conf.get_param('server')[i]
            except IndexError:
                pass

            fields.append(('NTP server', input[0], field_width, field_limit))
            fields.append(('NTP server', input[1], field_width, field_limit))
            fields.append(('NTP server', input[2], field_width, field_limit))
            fields.append(('NTP server', input[3], field_width, field_limit))

            retcode, input = self.console.form("NTP server configuration", text, fields)

            if retcode is not self.OK:
                break

            # Reset old parameters before inserting new one
            ntp_conf.del_param('server')
            ntp_conf.del_param('peer')

            # remove any whitespaces, empty values and comment at endline
            # the user might included and process errors
            for i in range(len(input)):
                if input[i] != '':
                    ntp_conf.set_param('server', input[i].strip().split('#')[0])
                else:
                    continue
            for server in ntp_conf.get_param('server'):
                err = _validate(server)

                if err:
                    err = "\n".join(err)

            self._check_error(err)
            # Add a peer ntp server from hosts file and write conf
            # Peer hosts are application server or database host composing
            # the appliance.
            hosts_conf = conf.Conf('hosts')
            ntp_conf.set_param('peer', self.peer_alias)
            err = ntp_conf.write_conf()
            self._check_error(err)
            executil.system('/sbin/service ntpd restart > /dev/null 2>&1')

            break

        return "advanced"

    def _adv_hosts(self):
        '''
        Configure /etc/hosts file and make sure that we have alias from both
        servers configured
        '''
        def _validate(hostname, alias, peer_hostname, peer_alias, peer_ip):
            errors = []
            if not peer_ip:
                errors.append("IP address missing")
            elif not IP.is_legal(peer_ip):
                errors.append("Invalid IP address")

            for elt in [hostname, alias, peer_hostname, peer_alias]:
                if type(elt) == list:
                    for subelt in elt:
                        if not self.NetworkInfo.is_legal_hostname(subelt):
                            errors.append(elt+' hostname not compliant. Illegal char, just alphanumeric and "-","." are authorized')
                else:
                    if not self.NetworkInfo.is_legal_hostname(elt):
                        errors.append(elt+' hostname not compliant. Illegal char, just alphanumeric and "-","." are authorized')
                        
                if errors:
                    return errors
                    
                return []

        # Fill form input based upon which role has the server (AS or DB instance)
        hosts_conf = conf.Conf("hosts")
        ifname = self.default_nic
        input = [None, None, None, None, None]
        peer_host = hosts_conf.get_host(self.peer_alias)
        input[0] = self.NetworkInfo.hostname
        try:
            input[1] = hosts_conf.get_host(self.alias)['others_alias']
            input[2] = peer_host['hostname']
            input[3] = peer_host['others_alias']
            input[4] = peer_host['ip']
        except TypeError:
            pass

        fields = []
        field_width = 50
        field_limit = 50
        
        label_mapping = {'oradb11g': 'DB', 'oradb12c': 'DB', 'ofm11g': 'AS'}

        while 1:
            fields.append(("Hostname", input[0], field_width, field_limit))
            fields.append(("Additional(s) alias", input[1], field_width, field_limit))
            fields.append((label_mapping[self.peer_alias] + " hostname", input[2], field_width, field_limit))
            fields.append((label_mapping[self.peer_alias] + " additional(s) aliases", input[3], field_width, field_limit))
            fields.append((label_mapping[self.peer_alias] + " IP address", input[4], field_width, field_limit))
            
            text = "Set /etc/hosts entries. Hostname can be shortname or fqdn.\nSpecify comma separated alias. There are optionnal and let you add hostname to be resolved."
            retcode, input = self.console.form("Hosts settings", text, fields)

            if retcode is not self.OK:
                break

            # remove any whitespaces the user might of included
            for i in range(len(input)):
                input[i] = input[i].strip()

            ip = ifutil.get_ipconf(ifname)[0]
            hostname = input[0]
            aliases = input[1].split(',')
            peer_hostname = input[2]
            peer_aliases = input[3].split(',')
            peer_ip = input[4]

            err = _validate(hostname, aliases, peer_hostname, peer_aliases, peer_ip)
            if err:
                err = "\n".join(err)
            else:
                aliases.append(self.alias)
                peer_aliases.append(self.peer_alias)
                err = hosts_conf.set_hosts(ip, hostname, aliases, peer_hostname, peer_aliases, peer_ip)
            self._check_error(err)

            # Change Syleps ux user password as it rely on hostname.
            err = self.syleps.change_password(hostname, alias)
            self._check_error(err)

            err = self.syleps.record_checksums()
            self._check_error(err)

            break

        return 'advanced'
    def _adv_timezone(self):
        timezones = []
        os.chdir('/usr/share/zoneinfo')
        for zone in os.listdir('.'):
            if os.path.isdir(zone) and zone == "Europe":
                for elt in os.listdir(zone):
                    timezone = os.path.join(zone, elt)
                    timezones.append(timezone)

        retcode, choice = self.console.menu("Timezone Selection",
                                            self.appname + "Timezone Selection\n",
                                            timezones)

        return "advanced"

    def _shutdown(self, text, opt):
        if self.console.yesno(text) == self.OK:
            self.running = False
            cmd = "shutdown %s now" % opt
            fgvt = os.environ.get("FGVT")
            if fgvt:
                cmd = "chvt %s; " % fgvt + cmd
            executil.system(cmd)

        return "advanced"

    def _adv_reboot(self):
        return self._shutdown("Reboot the appliance?", "-r")

    def _adv_shutdown(self):
        return self._shutdown("Shutdown the appliance?", "-h")

    def _adv_quit(self):
        if self.advanced_enabled:
            default_return_value = "advanced" ;
        else:
            'usage'

        if self.console.yesno("Do you really want to quit?") == self.OK:
            self.running = False

        return default_return_value

    _adv_networking = networking
    quit = _adv_quit

    def loop(self, dialog="usage"):
        self.running = True
        prev_dialog = dialog

        while dialog and self.running:
            try:
                try:
                    method = getattr(self, dialog)
                except AttributeError:
                    raise Error("dialog not supported: " + dialog)

                new_dialog = method()
                prev_dialog = dialog
                dialog = new_dialog

            except Exception, e:
                sio = StringIO()
                traceback.print_exc(file=sio)

                self.console.msgbox("Caught exception", sio.getvalue())
                dialog = prev_dialog

    def keep_ifconf(self):
        param = 'default_nic'
        self.config.del_param(param)
        self.config.set_param(param, self.default_nic)
        self.config.write_conf()
        self.default_nic_set = True

        text = self._get_ifconftext(self.default_nic)
        if self.console.yesno("%s\n\nAre we keeping this network configuration ?"% text, 20, 60) == self.OK:
            return 'usage'
        else:
           return 'networking'

    def usage(self):
        if self.advanced_enabled:
            default_button_label = "Advanced Menu"
            default_return_value = "advanced"
        else:
            default_button_label = "Quit"
            default_return_value = "quit"

        #if no interfaces at all - display error and go to advanced
        if len(self.ifnames) == 0:
            error = "No network adapters detected"
            if not self.advanced_enabled:
                fatal(error)

            self.console.msgbox("Error", error)
            return "advanced"

        #if interfaces but no default - ask if we keep that actual network configuration
        ifname = self.default_nic
        if not self.default_nic_set:
            error = "Network configuration need your approval."
            if not self.advanced_enabled:
                fatal(error)
            self._check_error(error)
            return "keep_ifconf"
        elif not ifname:
            error = "Network not yet configured.\n\n Please configure the network interface."
            if not self.advanced_enabled:
                fatal(error)
            self._check_error(error)
            self.default_nic = self.config.get_param('default_nic')
            return "networking"

        #display usage
        ipaddr = ifutil.get_ipconf(ifname)[0]
        hostname = self.NetworkInfo.hostname

        #backwards compatible - use usage.txt if it exists
        t = file(conf.path("usage.txt"), 'r').read()
        text = Template(t).substitute(serial=self._get_serial(), hostname=hostname, ipaddr=ipaddr)

        text += "\n" * (self.height - len(text.splitlines()) - 7)
        text += "\Z3                            Syleps SU Appliance\n"
        text += "                          https://www.syleps.com"

        retcode = self.console.msgbox("Sydel Univers appliance services",
                                      text, button_label=default_button_label)

        if retcode is not self.OK:
            self.running = False

        return default_return_value

def main():
    advanced_enabled = True

    args = sys.argv[1:]
    if args:
        if args[0] == '--usage':
            advanced_enabled = False
        else:
            usage()

    if os.geteuid() != 0:
        fatal("bootconsole needs root privileges to run")

    sc = SylepsConsole(advanced_enabled)
    sc.loop()

if __name__ == "__main__":
    main()